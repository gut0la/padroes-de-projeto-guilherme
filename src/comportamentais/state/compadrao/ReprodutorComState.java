package comportamentais.state.compadrao;

import comportamentais.state.compadrao.classes.Reprodutor;

/**
 * Demonstra√ß√£o do padr√£o State
 * 
 * Esta classe mostra como o padr√£o State resolve os problemas
 * da implementa√ß√£o sem padr√£o, proporcionando:
 * 
 * VANTAGENS:
 * - Elimina√ß√£o de condicionais complexas
 * - Cada estado encapsula seu pr√≥prio comportamento
 * - F√°cil adi√ß√£o de novos estados
 * - Transi√ß√µes de estado controladas
 * - C√≥digo mais limpo e manuten√≠vel
 * - Princ√≠pio Aberto/Fechado respeitado
 * - Responsabilidade √∫nica para cada estado
 */
public class ReprodutorComState {
    
    public static void main(String[] args) {
        System.out.println("=== DEMONSTRA√á√ÉO DO PADR√ÉO STATE ===");
        System.out.println("Reprodutor de M√∫sica com Estados Bem Definidos\n");
        
        // Cria√ß√£o do reprodutor (inicia no estado PARADO)
        Reprodutor reprodutor = new Reprodutor();
        
        // Demonstra√ß√£o 1: Opera√ß√µes b√°sicas
        System.out.println("\nüéµ === OPERA√á√ïES B√ÅSICAS ===");
        reprodutor.mostrarEstado();
        
        // Tentativa de pausar quando parado (comportamento espec√≠fico do estado)
        reprodutor.pause();
        
        // Play - transi√ß√£o para TOCANDO
        reprodutor.setMusicaAtual("Bohemian Rhapsody - Queen");
        reprodutor.play();
        reprodutor.mostrarEstado();
        
        // Pause - transi√ß√£o para PAUSADO
        reprodutor.pause();
        reprodutor.mostrarEstado();
        
        // Play novamente - volta para TOCANDO
        reprodutor.play();
        
        // Stop - volta para PARADO
        reprodutor.stop();
        reprodutor.mostrarEstado();
        
        // Demonstra√ß√£o 2: Controle de volume em diferentes estados
        System.out.println("\nüîä === CONTROLE DE VOLUME ===");
        reprodutor.alterarVolume(80); // No estado PARADO
        
        reprodutor.play();
        reprodutor.alterarVolume(60); // No estado TOCANDO
        
        reprodutor.pause();
        reprodutor.alterarVolume(40); // No estado PAUSADO
        
        // Demonstra√ß√£o 3: Pr√≥xima m√∫sica em diferentes estados
        System.out.println("\n‚è≠Ô∏è === PR√ìXIMA M√öSICA ===");
        reprodutor.stop();
        reprodutor.proximaMusica(); // No estado PARADO
        
        reprodutor.play();
        reprodutor.proximaMusica(); // No estado TOCANDO
        
        reprodutor.pause();
        reprodutor.proximaMusica(); // No estado PAUSADO
        
        // Demonstra√ß√£o 4: Sistema de bloqueio
        System.out.println("\nüîí === SISTEMA DE BLOQUEIO ===");
        reprodutor.stop();
        reprodutor.bloquear(); // Bloqueia o reprodutor
        reprodutor.mostrarEstado();
        
        // Tentativas de opera√ß√£o quando bloqueado
        reprodutor.play();
        reprodutor.pause();
        reprodutor.alterarVolume(100);
        reprodutor.proximaMusica();
        
        // Desbloqueio
        reprodutor.desbloquear();
        reprodutor.mostrarEstado();
        
        // Demonstra√ß√£o 5: Funcionalidades avan√ßadas
        System.out.println("\n‚öôÔ∏è === FUNCIONALIDADES AVAN√áADAS ===");
        
        // Verifica√ß√£o de a√ß√µes dispon√≠veis
        System.out.println("\nA√ß√µes dispon√≠veis no estado atual:");
        String[] acoes = reprodutor.getAcoesDisponiveis();
        for (String acao : acoes) {
            System.out.println("- " + acao);
        }
        
        // Verifica√ß√£o se pode executar a√ß√£o
        System.out.println("\nVerifica√ß√µes de a√ß√µes:");
        System.out.println("Pode fazer play? " + reprodutor.podeExecutarAcao("play"));
        System.out.println("Pode pausar? " + reprodutor.podeExecutarAcao("pause"));
        
        reprodutor.play();
        System.out.println("\nAp√≥s play:");
        System.out.println("Pode fazer play? " + reprodutor.podeExecutarAcao("play"));
        System.out.println("Pode pausar? " + reprodutor.podeExecutarAcao("pause"));
        
        // Demonstra√ß√£o 6: Configura√ß√µes adicionais
        System.out.println("\nüîÑ === CONFIGURA√á√ïES ===");
        reprodutor.setRepetirPlaylist(true);
        reprodutor.setMusicaAtual("Imagine - John Lennon");
        reprodutor.mostrarEstado();
        
        // Demonstra√ß√£o 7: Sequ√™ncia complexa de opera√ß√µes
        System.out.println("\nüéº === SEQU√äNCIA COMPLEXA ===");
        reprodutor.play();
        reprodutor.alterarVolume(75);
        reprodutor.proximaMusica();
        reprodutor.pause();
        reprodutor.alterarVolume(50);
        reprodutor.play();
        reprodutor.bloquear();
        reprodutor.play(); // Tentativa inv√°lida
        reprodutor.desbloquear();
        reprodutor.stop();
        
        // Estado final
        System.out.println("\nüìä === ESTADO FINAL ===");
        reprodutor.mostrarEstado();
        
        // Demonstra√ß√£o das vantagens do padr√£o
        System.out.println("\n‚úÖ === VANTAGENS DEMONSTRADAS ===");
        System.out.println("1. ‚úì Elimina√ß√£o de condicionais complexas");
        System.out.println("2. ‚úì Comportamento espec√≠fico por estado");
        System.out.println("3. ‚úì Transi√ß√µes controladas e seguras");
        System.out.println("4. ‚úì C√≥digo limpo e manuten√≠vel");
        System.out.println("5. ‚úì F√°cil extens√£o com novos estados");
        System.out.println("6. ‚úì Responsabilidade √∫nica por estado");
        System.out.println("7. ‚úì Princ√≠pio Aberto/Fechado respeitado");
        
        System.out.println("\nüéØ Padr√£o State implementado com sucesso!");
        System.out.println("Compare com ReprodutorSemState para ver as diferen√ßas.");
    }
    
    /**
     * M√©todo auxiliar para demonstrar a flexibilidade do padr√£o
     */
    private static void demonstrarFlexibilidade() {
        System.out.println("\nüîß === FLEXIBILIDADE DO PADR√ÉO ===");
        
        Reprodutor reprodutor = new Reprodutor();
        
        // Simula√ß√£o de diferentes cen√°rios
        String[] comandos = {"play", "pause", "play", "stop", "bloquear", "play", "desbloquear", "play"};
        
        for (String comando : comandos) {
            System.out.println("\nExecutando: " + comando.toUpperCase());
            
            switch (comando) {
                case "play":
                    reprodutor.play();
                    break;
                case "pause":
                    reprodutor.pause();
                    break;
                case "stop":
                    reprodutor.stop();
                    break;
                case "bloquear":
                    reprodutor.bloquear();
                    break;
                case "desbloquear":
                    reprodutor.desbloquear();
                    break;
            }
            
            System.out.println("Estado atual: " + reprodutor.getEstado().getNomeEstado());
        }
    }
}