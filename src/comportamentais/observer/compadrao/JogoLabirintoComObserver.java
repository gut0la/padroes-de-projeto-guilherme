package comportamentais.observer.compadrao;

import comportamentais.observer.compadrao.classes.Jogador;
import comportamentais.observer.compadrao.observers.MapaObserver;
import comportamentais.observer.compadrao.observers.PontuacaoObserver;
import comportamentais.observer.compadrao.observers.LogObserver;

/**
 * Demonstra√ß√£o do padr√£o Observer em a√ß√£o
 * 
 * PADR√ÉO OBSERVER:
 * Define uma depend√™ncia um-para-muitos entre objetos, de modo que quando
 * um objeto muda de estado, todos os seus dependentes s√£o notificados
 * e atualizados automaticamente.
 * 
 * COMPONENTES DO PADR√ÉO:
 * - Subject (Jogador): Objeto observ√°vel que mant√©m lista de observers
 * - Observer (Interface): Define contrato para objetos que querem ser notificados
 * - ConcreteObserver (MapaObserver, PontuacaoObserver, LogObserver): Implementa√ß√µes espec√≠ficas
 * 
 * BENEF√çCIOS DEMONSTRADOS:
 * ‚úÖ Baixo acoplamento: Jogador n√£o conhece classes espec√≠ficas de observers
 * ‚úÖ Extensibilidade: Novos observers podem ser adicionados sem modificar c√≥digo existente
 * ‚úÖ Flexibilidade: Observers podem ser adicionados/removidos dinamicamente
 * ‚úÖ Responsabilidade √∫nica: Cada observer tem uma responsabilidade espec√≠fica
 * ‚úÖ Princ√≠pio aberto/fechado: Aberto para extens√£o, fechado para modifica√ß√£o
 */
public class JogoLabirintoComObserver {
    
    public static void main(String[] args) {
        System.out.println("=== JOGO DE LABIRINTO COM PADR√ÉO OBSERVER ===");
        System.out.println("Demonstra√ß√£o: Baixo acoplamento e notifica√ß√£o autom√°tica\n");
        
        // FASE 1: Cria√ß√£o do Subject (objeto observ√°vel)
        System.out.println("üéÆ FASE 1: Criando jogador (Subject)...");
        Jogador heroi = new Jogador("Her√≥i Aventureiro");
        
        // FASE 2: Cria√ß√£o dos Observers (objetos interessados)
        System.out.println("\nüëÅÔ∏è  FASE 2: Criando observers...");
        MapaObserver mapa = new MapaObserver();
        PontuacaoObserver pontuacao = new PontuacaoObserver();
        LogObserver log = new LogObserver();
        
        // FASE 3: Registro dos Observers no Subject
        System.out.println("\nüîó FASE 3: Registrando observers no jogador...");
        heroi.adicionarObserver(mapa);
        heroi.adicionarObserver(pontuacao);
        heroi.adicionarObserver(log);
        
        System.out.println("Observers registrados: " + heroi.getNumeroObservers());
        
        // FASE 4: Demonstra√ß√£o do padr√£o em a√ß√£o
        System.out.println("\nüöÄ FASE 4: Padr√£o Observer em a√ß√£o!");
        System.out.println("Cada a√ß√£o do jogador notifica AUTOMATICAMENTE todos os observers:\n");
        
        // Movimentos - todos os observers s√£o notificados automaticamente
        System.out.println("--- Explorando o labirinto ---");
        heroi.mover("Norte");
        heroi.mover("Leste");
        heroi.mover("Norte");
        heroi.mover("Leste");
        
        // Coleta de itens
        System.out.println("\n--- Coletando tesouros ---");
        heroi.coletarItem("Tesouro");
        heroi.mover("Sul");
        heroi.coletarItem("Gema");
        
        // Mais movimentos para demonstrar padr√µes
        System.out.println("\n--- Continuando explora√ß√£o ---");
        heroi.mover("Oeste");
        heroi.mover("Norte");
        heroi.mover("Norte");
        heroi.coletarItem("Chave");
        
        // Simulando dano
        System.out.println("\n--- Enfrentando perigos ---");
        heroi.receberDano(30);
        heroi.mover("Sul");
        heroi.receberDano(25);
        
        // Mais coletas e movimentos
        System.out.println("\n--- Buscando mais tesouros ---");
        heroi.coletarItem("Po√ß√£o");
        heroi.mover("Leste");
        heroi.mover("Norte");
        heroi.coletarItem("Diamante");
        
        // FASE 5: Demonstra√ß√£o de remo√ß√£o din√¢mica de observer
        System.out.println("\nüîÑ FASE 5: Demonstrando remo√ß√£o din√¢mica de observer...");
        System.out.println("Removendo observer de pontua√ß√£o...");
        heroi.removerObserver(pontuacao);
        
        System.out.println("Movimento ap√≥s remo√ß√£o (pontua√ß√£o n√£o ser√° notificada):");
        heroi.mover("Sul");
        
        // Readicionando o observer
        System.out.println("\nReadicionando observer de pontua√ß√£o...");
        heroi.adicionarObserver(pontuacao);
        heroi.mover("Oeste");
        
        // FASE 6: Demonstra√ß√£o de adi√ß√£o de novo observer em runtime
        System.out.println("\n‚ûï FASE 6: Adicionando novo observer em runtime...");
        AudioObserver audio = new AudioObserver();
        heroi.adicionarObserver(audio);
        
        System.out.println("Movimento com novo observer:");
        heroi.mover("Norte");
        heroi.coletarItem("Ouro");
        
        // FASE 7: Situa√ß√£o cr√≠tica
        System.out.println("\n‚ö†Ô∏è  FASE 7: Situa√ß√£o cr√≠tica...");
        heroi.receberDano(40); // Vida cr√≠tica
        heroi.mover("Sul");
        
        // FASE 8: Final tr√°gico (demonstra notifica√ß√£o de morte)
        System.out.println("\nüíÄ FASE 8: Final tr√°gico...");
        heroi.receberDano(50); // Morte
        
        // FASE 9: Relat√≥rios finais
        System.out.println("\nüìä FASE 9: Relat√≥rios finais dos observers...");
        
        System.out.println("\n=== RELAT√ìRIO DO MAPA ===");
        mapa.mostrarMapa();
        
        System.out.println("\n=== RELAT√ìRIO DE PONTUA√á√ÉO ===");
        pontuacao.mostrarRelatorio();
        
        System.out.println("\n=== ESTAT√çSTICAS DO LOG ===");
        log.mostrarEstatisticas();
        
        System.out.println("\n=== √öLTIMOS 5 EVENTOS ===");
        log.mostrarUltimosEventos(5);
        
        // FASE 10: Demonstra√ß√£o dos benef√≠cios do padr√£o
        System.out.println("\nüéØ FASE 10: Benef√≠cios do padr√£o Observer demonstrados:");
        demonstrarBeneficios();
    }
    
    /**
     * Demonstra os benef√≠cios alcan√ßados com o padr√£o Observer
     */
    private static void demonstrarBeneficios() {
        System.out.println("\n‚úÖ BENEF√çCIOS ALCAN√áADOS:");
        System.out.println("1. üîó BAIXO ACOPLAMENTO:");
        System.out.println("   - Jogador n√£o conhece classes espec√≠ficas de observers");
        System.out.println("   - Observers n√£o dependem uns dos outros");
        
        System.out.println("\n2. üîß EXTENSIBILIDADE:");
        System.out.println("   - AudioObserver foi adicionado sem modificar c√≥digo existente");
        System.out.println("   - Novos observers podem ser criados facilmente");
        
        System.out.println("\n3. üîÑ FLEXIBILIDADE:");
        System.out.println("   - Observers podem ser adicionados/removidos em runtime");
        System.out.println("   - Sistema funciona com qualquer n√∫mero de observers");
        
        System.out.println("\n4. üìã RESPONSABILIDADE √öNICA:");
        System.out.println("   - Cada observer tem uma responsabilidade espec√≠fica");
        System.out.println("   - Jogador foca apenas em sua l√≥gica principal");
        
        System.out.println("\n5. üéØ NOTIFICA√á√ÉO AUTOM√ÅTICA:");
        System.out.println("   - Todos os observers s√£o notificados automaticamente");
        System.out.println("   - N√£o h√° risco de esquecer de notificar algum sistema");
        
        System.out.println("\n6. üîí PRINC√çPIO ABERTO/FECHADO:");
        System.out.println("   - Sistema aberto para extens√£o (novos observers)");
        System.out.println("   - Fechado para modifica√ß√£o (c√≥digo existente n√£o muda)");
    }
}

/**
 * Observer adicional criado em runtime para demonstrar extensibilidade
 * 
 * DEMONSTRA√á√ÉO: Este observer foi criado para mostrar como √© f√°cil
 * adicionar novos observers sem modificar o c√≥digo existente.
 */
class AudioObserver implements comportamentais.observer.compadrao.interfaces.Observer {
    
    @Override
    public void notificar(String evento, Object dados) {
        switch (evento) {
            case "movimento":
                System.out.println("  [√ÅUDIO] üîä Som de passos: *tap tap*");
                break;
            case "coleta":
                System.out.println("  [√ÅUDIO] üîä Som de coleta: *bling!*");
                break;
            case "dano":
                System.out.println("  [√ÅUDIO] üîä Som de dor: *auch!*");
                break;
            case "morte":
                System.out.println("  [√ÅUDIO] üîä Som dram√°tico: *m√∫sica triste*");
                break;
        }
    }
}