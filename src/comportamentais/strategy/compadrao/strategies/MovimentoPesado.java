package comportamentais.strategy.compadrao.strategies;

import comportamentais.strategy.compadrao.interfaces.EstrategiaMovimento;

/**
 * Estrat√©gia concreta para movimento pesado (guerreiros)
 * 
 * PADR√ÉO STRATEGY - CONCRETE STRATEGY:
 * Esta classe implementa um algoritmo espec√≠fico de movimento pesado,
 * t√≠pico de guerreiros com armadura pesada.
 * 
 * CARACTER√çSTICAS:
 * - Movimento lento mas est√°vel
 * - B√¥nus em terrenos rochosos
 * - Penalidade em terrenos pantanosos
 * - Resistente a empurr√µes
 */
public class MovimentoPesado implements EstrategiaMovimento {
    
    @Override
    public int executarMovimento(String personagem, String terreno, int velocidadeBase) {
        // Velocidade base reduzida devido ao peso da armadura
        int velocidade = velocidadeBase - 2;
        
        // Modificadores baseados no terreno
        switch (terreno.toLowerCase()) {
            case "montanha":
            case "rochoso":
                velocidade += 3; // Guerreiros s√£o bons em terrenos rochosos
                System.out.println("  ‚õ∞Ô∏è  Terreno rochoso favorece movimento pesado: +3 velocidade");
                break;
                
            case "p√¢ntano":
            case "lama":
                velocidade -= 3; // Armadura pesada afunda na lama
                System.out.println("  üê∏ Armadura pesada afunda no p√¢ntano: -3 velocidade");
                break;
                
            case "gelo":
                velocidade -= 1; // Dificuldade para manter equil√≠brio
                System.out.println("  üßä Gelo dificulta movimento pesado: -1 velocidade");
                break;
                
            case "areia":
                velocidade -= 2; // Afunda na areia
                System.out.println("  üèúÔ∏è  Areia dificulta movimento pesado: -2 velocidade");
                break;
                
            default:
                // Terreno neutro - sem modificadores
                break;
        }
        
        // B√¥nus de estabilidade (resist√™ncia a empurr√µes)
        System.out.println("  üõ°Ô∏è  Movimento est√°vel e resistente a empurr√µes");
        
        System.out.println(personagem + " " + getDescricaoMovimento() + " por " + terreno);
        
        return Math.max(1, velocidade); // Velocidade m√≠nima de 1
    }
    
    @Override
    public String getNomeEstrategia() {
        return "Movimento Pesado";
    }
    
    @Override
    public String getDescricaoMovimento() {
        return "avan√ßa com passos firmes e determinados";
    }
    
    @Override
    public boolean isEficazEm(String terreno) {
        return terreno.toLowerCase().equals("montanha") || 
               terreno.toLowerCase().equals("rochoso");
    }
}

/**
 * Estrat√©gia concreta para movimento m√°gico (magos)
 * 
 * CARACTER√çSTICAS:
 * - Levita√ß√£o sobre obst√°culos
 * - B√¥nus em √°reas m√°gicas
 * - Penalidade em √°reas anti-magia
 * - Consome mana
 */
class MovimentoMagico implements EstrategiaMovimento {
    
    @Override
    public int executarMovimento(String personagem, String terreno, int velocidadeBase) {
        // Velocidade base com b√¥nus m√°gico
        int velocidade = velocidadeBase + 1;
        
        // Modificadores baseados no terreno
        switch (terreno.toLowerCase()) {
            case "floresta":
            case "selva":
                velocidade -= 2; // Interfer√™ncia de energia natural
                System.out.println("  üå≥ Energia natural interfere na magia: -2 velocidade");
                break;
                
            case "torre m√°gica":
            case "c√≠rculo m√°gico":
                velocidade += 4; // Amplifica√ß√£o m√°gica
                System.out.println("  ‚ú® Energia m√°gica amplifica movimento: +4 velocidade");
                break;
                
            case "p√¢ntano":
            case "√°gua":
                velocidade += 2; // Levita√ß√£o sobre obst√°culos l√≠quidos
                System.out.println("  üåä Levita√ß√£o sobre obst√°culos l√≠quidos: +2 velocidade");
                break;
                
            case "√°rea anti-magia":
                velocidade -= 5; // Supress√£o m√°gica
                System.out.println("  üö´ √Årea anti-magia suprime levita√ß√£o: -5 velocidade");
                break;
                
            default:
                // Terreno neutro
                break;
        }
        
        // Simula consumo de mana
        System.out.println("  üîÆ Mana consumida para levita√ß√£o: 5 pontos");
        
        System.out.println(personagem + " " + getDescricaoMovimento() + " por " + terreno);
        
        return Math.max(1, velocidade);
    }
    
    @Override
    public String getNomeEstrategia() {
        return "Movimento M√°gico";
    }
    
    @Override
    public String getDescricaoMovimento() {
        return "levita graciosamente alguns cent√≠metros do ch√£o";
    }
    
    @Override
    public boolean isEficazEm(String terreno) {
        return terreno.toLowerCase().contains("m√°gic") || 
               terreno.toLowerCase().equals("√°gua") ||
               terreno.toLowerCase().equals("p√¢ntano");
    }
}

/**
 * Estrat√©gia concreta para movimento √°gil (arqueiros/ladinos)
 * 
 * CARACTER√çSTICAS:
 * - Alta velocidade
 * - B√¥nus em terrenos abertos
 * - Habilidade de escalada
 * - Penalidade em espa√ßos apertados
 */
class MovimentoAgil implements EstrategiaMovimento {
    
    @Override
    public int executarMovimento(String personagem, String terreno, int velocidadeBase) {
        // Velocidade base aumentada por agilidade
        int velocidade = velocidadeBase + 3;
        
        // Modificadores baseados no terreno
        switch (terreno.toLowerCase()) {
            case "plan√≠cie":
            case "campo aberto":
                velocidade += 4; // Terreno ideal para corrida
                System.out.println("  üèÉ Terreno aberto permite corrida livre: +4 velocidade");
                break;
                
            case "floresta":
            case "√°rvores":
                velocidade += 2; // Habilidade de escalada e parkour
                System.out.println("  üå≤ Agilidade permite parkour nas √°rvores: +2 velocidade");
                break;
                
            case "caverna":
            case "t√∫nel":
                velocidade -= 3; // Espa√ßos apertados limitam agilidade
                System.out.println("  üï≥Ô∏è  Espa√ßos apertados limitam agilidade: -3 velocidade");
                break;
                
            case "gelo":
                velocidade += 1; // Agilidade ajuda com equil√≠brio
                System.out.println("  ‚õ∏Ô∏è  Agilidade ajuda no equil√≠brio no gelo: +1 velocidade");
                break;
                
            case "escombros":
                velocidade -= 1; // Obst√°culos requerem cuidado
                System.out.println("  üß± Escombros requerem movimento cuidadoso: -1 velocidade");
                break;
                
            default:
                // Terreno neutro
                break;
        }
        
        // B√¥nus de esquiva durante movimento
        System.out.println("  üí® Movimento √°gil dificulta ataques inimigos");
        
        System.out.println(personagem + " " + getDescricaoMovimento() + " por " + terreno);
        
        return Math.max(1, velocidade);
    }
    
    @Override
    public String getNomeEstrategia() {
        return "Movimento √Ågil";
    }
    
    @Override
    public String getDescricaoMovimento() {
        return "corre com agilidade felina, saltando obst√°culos";
    }
    
    @Override
    public boolean isEficazEm(String terreno) {
        return terreno.toLowerCase().equals("plan√≠cie") || 
               terreno.toLowerCase().equals("floresta") ||
               terreno.toLowerCase().equals("campo aberto");
    }
}

/**
 * Estrat√©gia concreta para movimento furtivo (assassinos/espi√µes)
 * 
 * CARACTER√çSTICAS:
 * - Movimento silencioso
 * - B√¥nus em √°reas com sombras
 * - Habilidade de se esconder
 * - Velocidade moderada mas indetect√°vel
 */
class MovimentoFurtivo implements EstrategiaMovimento {
    
    @Override
    public int executarMovimento(String personagem, String terreno, int velocidadeBase) {
        // Velocidade reduzida para manter sil√™ncio
        int velocidade = velocidadeBase;
        
        // Modificadores baseados no terreno
        switch (terreno.toLowerCase()) {
            case "sombras":
            case "escurid√£o":
                velocidade += 3; // Ambiente ideal para furtividade
                System.out.println("  üåë Sombras favorecem movimento furtivo: +3 velocidade");
                break;
                
            case "telhados":
            case "vigas":
                velocidade += 2; // Habilidade de escalada silenciosa
                System.out.println("  üè† Movimento silencioso pelos telhados: +2 velocidade");
                break;
                
            case "folhas secas":
            case "galhos":
                velocidade -= 2; // Risco de fazer ru√≠do
                System.out.println("  üçÇ Folhas secas podem fazer ru√≠do: -2 velocidade");
                break;
                
            case "√°gua rasa":
                velocidade -= 1; // Respingos podem denunciar
                System.out.println("  üíß √Ågua pode fazer respingos: -1 velocidade");
                break;
                
            case "√°rea iluminada":
                velocidade -= 3; // Dificulta oculta√ß√£o
                System.out.println("  üí° √Årea iluminada dificulta furtividade: -3 velocidade");
                break;
                
            default:
                // Terreno neutro
                break;
        }
        
        // B√¥nus de oculta√ß√£o
        System.out.println("  üë§ Movimento silencioso e dif√≠cil de detectar");
        
        System.out.println(personagem + " " + getDescricaoMovimento() + " por " + terreno);
        
        return Math.max(1, velocidade);
    }
    
    @Override
    public String getNomeEstrategia() {
        return "Movimento Furtivo";
    }
    
    @Override
    public String getDescricaoMovimento() {
        return "move-se silenciosamente como uma sombra";
    }
    
    @Override
    public boolean isEficazEm(String terreno) {
        return terreno.toLowerCase().contains("sombra") || 
               terreno.toLowerCase().contains("escur") ||
               terreno.toLowerCase().equals("telhados");
    }
}