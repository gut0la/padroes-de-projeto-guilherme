package comportamentais.strategy.compadrao.strategies;

import comportamentais.strategy.compadrao.interfaces.EstrategiaAtaque;

/**
 * Estrat√©gia concreta para ataques corpo a corpo
 * 
 * PADR√ÉO STRATEGY - CONCRETE STRATEGY:
 * Esta classe implementa um algoritmo espec√≠fico de ataque corpo a corpo,
 * encapsulando toda a l√≥gica relacionada a este tipo de combate.
 * 
 * CARACTER√çSTICAS:
 * - Alto dano base
 * - B√¥nus contra inimigos pr√≥ximos
 * - Penalidade contra inimigos voadores
 * - Chance de ataque cr√≠tico
 */
public class AtaqueCorpoACorpo implements EstrategiaAtaque {
    
    private static final double CHANCE_CRITICO = 0.15; // 15% de chance
    private static final double MULTIPLICADOR_CRITICO = 2.0;
    
    /**
     * Implementa o algoritmo espec√≠fico de ataque corpo a corpo
     * 
     * ALGORITMO:
     * 1. Calcula dano base com b√¥nus de for√ßa
     * 2. Verifica chance de cr√≠tico
     * 3. Aplica modificadores baseados no tipo de alvo
     * 4. Retorna dano final
     */
    @Override
    public int executarAtaque(String atacante, int ataqueBase, Object alvo) {
        // Dano base com b√¥nus de for√ßa para combate corpo a corpo
        int dano = ataqueBase + 10;
        
        // Verifica ataque cr√≠tico
        boolean critico = Math.random() < CHANCE_CRITICO;
        if (critico) {
            dano = (int) (dano * MULTIPLICADOR_CRITICO);
            System.out.println("  üí• ATAQUE CR√çTICO! Dano dobrado!");
        }
        
        // Modificadores baseados no tipo de alvo (simula√ß√£o)
        String tipoAlvo = alvo.toString().toLowerCase();
        if (tipoAlvo.contains("orc") || tipoAlvo.contains("goblin")) {
            dano += 5; // B√¥nus contra humanoides
            System.out.println("  ‚öîÔ∏è  B√¥nus contra humanoides: +5 dano");
        } else if (tipoAlvo.contains("drag√£o") || tipoAlvo.contains("voador")) {
            dano -= 8; // Penalidade contra criaturas voadoras
            System.out.println("  ‚úàÔ∏è  Penalidade contra criaturas voadoras: -8 dano");
        }
        
        // Exibe a√ß√£o de ataque
        System.out.println(atacante + " " + getDescricaoAtaque());
        
        return Math.max(1, dano); // Dano m√≠nimo de 1
    }
    
    @Override
    public String getNomeEstrategia() {
        return "Combate Corpo a Corpo";
    }
    
    @Override
    public String getDescricaoAtaque() {
        return "avan√ßa com determina√ß√£o e desfere um poderoso golpe de espada!";
    }
}

/**
 * Estrat√©gia concreta para ataques m√°gicos
 * 
 * CARACTER√çSTICAS:
 * - Dano m√°gico que ignora armadura f√≠sica
 * - B√¥nus contra criaturas das trevas
 * - Consome mana (simulado)
 * - √Årea de efeito
 */
class AtaqueMagico implements EstrategiaAtaque {
    
    private static final int BONUS_MAGICO = 15;
    private static final double CHANCE_AREA = 0.25; // 25% chance de √°rea
    
    @Override
    public int executarAtaque(String atacante, int ataqueBase, Object alvo) {
        // Dano m√°gico com b√¥nus especial
        int dano = ataqueBase + BONUS_MAGICO;
        
        // Verifica ataque em √°rea
        boolean area = Math.random() < CHANCE_AREA;
        if (area) {
            dano = (int) (dano * 1.3); // 30% mais dano em √°rea
            System.out.println("  üåü EXPLOS√ÉO M√ÅGICA! Ataque em √°rea!");
        }
        
        // Modificadores baseados no tipo de alvo
        String tipoAlvo = alvo.toString().toLowerCase();
        if (tipoAlvo.contains("morto-vivo") || tipoAlvo.contains("sombra")) {
            dano += 12; // Muito eficaz contra mortos-vivos
            System.out.println("  ‚ú® Magia sagrada! B√¥nus contra mortos-vivos: +12 dano");
        } else if (tipoAlvo.contains("golem") || tipoAlvo.contains("construto")) {
            dano -= 5; // Menos eficaz contra construtos
            System.out.println("  üóø Resist√™ncia m√°gica: -5 dano");
        }
        
        // Simula consumo de mana
        System.out.println("  üîÆ Mana consumida: 15 pontos");
        
        System.out.println(atacante + " " + getDescricaoAtaque());
        
        return Math.max(1, dano);
    }
    
    @Override
    public String getNomeEstrategia() {
        return "Magia Ofensiva";
    }
    
    @Override
    public String getDescricaoAtaque() {
        return "concentra energia m√°gica e lan√ßa uma devastadora bola de fogo!";
    }
}

/**
 * Estrat√©gia concreta para ataques √† dist√¢ncia
 * 
 * CARACTER√çSTICAS:
 * - Ataque preciso de longa dist√¢ncia
 * - B√¥nus de precis√£o
 * - Eficaz contra alvos r√°pidos
 * - Penalidade em combate pr√≥ximo
 */
class AtaqueDistancia implements EstrategiaAtaque {
    
    private static final int BONUS_PRECISAO = 8;
    private static final double CHANCE_TIRO_CERTEIRO = 0.20; // 20% chance
    
    @Override
    public int executarAtaque(String atacante, int ataqueBase, Object alvo) {
        // Dano base com b√¥nus de precis√£o
        int dano = ataqueBase + BONUS_PRECISAO;
        
        // Verifica tiro certeiro (ignora defesas)
        boolean certeiro = Math.random() < CHANCE_TIRO_CERTEIRO;
        if (certeiro) {
            dano += 15;
            System.out.println("  üéØ TIRO CERTEIRO! Ignora defesas!");
        }
        
        // Modificadores baseados no tipo de alvo
        String tipoAlvo = alvo.toString().toLowerCase();
        if (tipoAlvo.contains("voador") || tipoAlvo.contains("r√°pido")) {
            dano += 7; // B√¥nus contra alvos √°geis
            System.out.println("  üèπ Tiro preciso contra alvo √°gil: +7 dano");
        } else if (tipoAlvo.contains("blindado") || tipoAlvo.contains("tanque")) {
            dano -= 6; // Penalidade contra alvos blindados
            System.out.println("  üõ°Ô∏è  Armadura pesada reduz impacto: -6 dano");
        }
        
        // Simula consumo de muni√ß√£o
        System.out.println("  üèπ Flecha consumida");
        
        System.out.println(atacante + " " + getDescricaoAtaque());
        
        return Math.max(1, dano);
    }
    
    @Override
    public String getNomeEstrategia() {
        return "Combate √† Dist√¢ncia";
    }
    
    @Override
    public String getDescricaoAtaque() {
        return "mira cuidadosamente e dispara uma flecha certeira!";
    }
}

/**
 * Estrat√©gia concreta para ataques furtivos
 * 
 * CARACTER√çSTICAS:
 * - Alto dano quando n√£o detectado
 * - Chance de ataque instant√¢neo
 * - B√¥nus contra alvos distra√≠dos
 * - Requer posicionamento
 */
class AtaqueFurtivo implements EstrategiaAtaque {
    
    private static final double CHANCE_FURTIVO = 0.30; // 30% chance
    private static final double MULTIPLICADOR_FURTIVO = 2.5;
    
    @Override
    public int executarAtaque(String atacante, int ataqueBase, Object alvo) {
        // Dano base moderado
        int dano = ataqueBase + 5;
        
        // Verifica se conseguiu ataque furtivo
        boolean furtivo = Math.random() < CHANCE_FURTIVO;
        if (furtivo) {
            dano = (int) (dano * MULTIPLICADOR_FURTIVO);
            System.out.println("  üó°Ô∏è  ATAQUE FURTIVO! Dano massivo pelas costas!");
        }
        
        // Modificadores baseados no tipo de alvo
        String tipoAlvo = alvo.toString().toLowerCase();
        if (tipoAlvo.contains("mago") || tipoAlvo.contains("arqueiro")) {
            dano += 10; // Muito eficaz contra alvos fr√°geis
            System.out.println("  üé≠ Alvo vulner√°vel: +10 dano");
        } else if (tipoAlvo.contains("alerta") || tipoAlvo.contains("vigilante")) {
            dano -= 8; // Penalidade contra alvos alertas
            System.out.println("  üëÅÔ∏è  Alvo alerta detectou movimento: -8 dano");
        }
        
        System.out.println(atacante + " " + getDescricaoAtaque());
        
        return Math.max(1, dano);
    }
    
    @Override
    public String getNomeEstrategia() {
        return "Ataque Furtivo";
    }
    
    @Override
    public String getDescricaoAtaque() {
        return "move-se silenciosamente pelas sombras e ataca pelas costas!";
    }
}