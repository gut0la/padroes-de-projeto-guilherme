package comportamentais.visitor.compadrao;

import java.util.*;

/**
 * Exemplo COM o padr√£o Visitor
 * 
 * Vantagens demonstradas:
 * 1. Separa√ß√£o clara entre dados e opera√ß√µes
 * 2. Facilidade para adicionar novas opera√ß√µes sem modificar classes existentes
 * 3. Centraliza√ß√£o de l√≥gica relacionada em visitors espec√≠ficos
 * 4. Elimina√ß√£o de c√≥digo duplicado
 * 5. Princ√≠pio Open/Closed respeitado
 * 6. Double dispatch para polimorfismo avan√ßado
 * 7. Reutiliza√ß√£o de opera√ß√µes em diferentes contextos
 * 8. Facilidade de manuten√ß√£o e teste
 */
public class SistemaRelatoriosComVisitor {
    
    public static void main(String[] args) {
        System.out.println("=== SISTEMA DE RELAT√ìRIOS COM VISITOR PATTERN ===");
        System.out.println("\n‚úÖ VANTAGENS DEMONSTRADAS:");
        System.out.println("1. Separa√ß√£o clara entre dados e opera√ß√µes");
        System.out.println("2. Facilidade para adicionar novas opera√ß√µes");
        System.out.println("3. Elimina√ß√£o de c√≥digo duplicado");
        System.out.println("4. Centraliza√ß√£o de l√≥gica relacionada");
        System.out.println("5. Princ√≠pio Open/Closed respeitado");
        System.out.println("6. Double dispatch implementado");
        System.out.println("7. Reutiliza√ß√£o e manutenibilidade\n");
        
        // Criando funcion√°rios - classes focam apenas nos dados
        List<Funcionario> funcionarios = Arrays.asList(
            new Desenvolvedor("Ana Silva", 5000.0, 1500, 25),
            new Gerente("Carlos Santos", 8000.0, 8, 12),
            new Estagiario("Jo√£o Oliveira", 1200.0, 40, 15),
            new Desenvolvedor("Maria Costa", 6500.0, 2200, 18),
            new Gerente("Pedro Lima", 9500.0, 12, 8)
        );
        
        // Demonstrando o uso dos diferentes visitors
        demonstrarRelatoriosSalariais(funcionarios);
        demonstrarRelatoriosDesempenho(funcionarios);
        demonstrarRelatoriosTributarios(funcionarios);
        
        // Demonstrando facilidade de extens√£o
        demonstrarNovaOperacao(funcionarios);
        
        // Demonstrando reutiliza√ß√£o de visitors
        demonstrarReutilizacaoVisitors(funcionarios);
        
        // Demonstrando vantagens do padr√£o
        demonstrarVantagensDoVisitor();
    }
    
    private static void demonstrarRelatoriosSalariais(List<Funcionario> funcionarios) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("RELAT√ìRIOS SALARIAIS - USANDO VISITOR");
        System.out.println("=".repeat(60));
        
        RelatorioSalarioVisitor salarioVisitor = new RelatorioSalarioVisitor();
        
        for (Funcionario funcionario : funcionarios) {
            funcionario.aceitar(salarioVisitor); // Double dispatch!
            System.out.println(salarioVisitor.getRelatorio());
            System.out.println("-".repeat(40));
        }
    }
    
    private static void demonstrarRelatoriosDesempenho(List<Funcionario> funcionarios) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("RELAT√ìRIOS DE DESEMPENHO - USANDO VISITOR");
        System.out.println("=".repeat(60));
        
        RelatorioDesempenhoVisitor desempenhoVisitor = new RelatorioDesempenhoVisitor();
        
        for (Funcionario funcionario : funcionarios) {
            funcionario.aceitar(desempenhoVisitor);
            System.out.println(desempenhoVisitor.getRelatorio());
            System.out.println("-".repeat(40));
        }
    }
    
    private static void demonstrarRelatoriosTributarios(List<Funcionario> funcionarios) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("RELAT√ìRIOS TRIBUT√ÅRIOS - USANDO VISITOR");
        System.out.println("=".repeat(60));
        
        RelatorioTributarioVisitor tributarioVisitor = new RelatorioTributarioVisitor();
        
        for (Funcionario funcionario : funcionarios) {
            funcionario.aceitar(tributarioVisitor);
            System.out.println(tributarioVisitor.getRelatorio());
            System.out.println("-".repeat(40));
        }
        
        // Demonstrando funcionalidade adicional do visitor
        tributarioVisitor.gerarResumoTributario();
        System.out.println(tributarioVisitor.getRelatorio());
    }
    
    private static void demonstrarNovaOperacao(List<Funcionario> funcionarios) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("NOVA OPERA√á√ÉO - ESTAT√çSTICAS (SEM MODIFICAR CLASSES EXISTENTES)");
        System.out.println("=".repeat(60));
        
        // Criando um novo visitor sem modificar as classes de funcion√°rio!
        EstatisticasVisitor estatisticasVisitor = new EstatisticasVisitor();
        
        for (Funcionario funcionario : funcionarios) {
            funcionario.aceitar(estatisticasVisitor);
        }
        
        System.out.println(estatisticasVisitor.getEstatisticas());
    }
    
    private static void demonstrarReutilizacaoVisitors(List<Funcionario> funcionarios) {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("REUTILIZA√á√ÉO DE VISITORS - RELAT√ìRIO CONSOLIDADO");
        System.out.println("=".repeat(60));
        
        // Reutilizando visitors para criar um relat√≥rio consolidado
        RelatorioSalarioVisitor salarioVisitor = new RelatorioSalarioVisitor();
        RelatorioDesempenhoVisitor desempenhoVisitor = new RelatorioDesempenhoVisitor();
        
        System.out.println("=== RELAT√ìRIO CONSOLIDADO POR FUNCION√ÅRIO ===");
        
        for (Funcionario funcionario : funcionarios) {
            System.out.println("\n" + "*".repeat(50));
            System.out.println("FUNCION√ÅRIO: " + funcionario.getNome().toUpperCase());
            System.out.println("*".repeat(50));
            
            // Aplicando m√∫ltiplos visitors no mesmo funcion√°rio
            funcionario.aceitar(salarioVisitor);
            System.out.println(salarioVisitor.getRelatorio());
            
            funcionario.aceitar(desempenhoVisitor);
            System.out.println(desempenhoVisitor.getRelatorio());
        }
    }
    
    private static void demonstrarVantagensDoVisitor() {
        System.out.println("\n" + "=".repeat(60));
        System.out.println("VANTAGENS DO PADR√ÉO VISITOR DEMONSTRADAS");
        System.out.println("=".repeat(60));
        
        System.out.println("\n1. SEPARA√á√ÉO DE RESPONSABILIDADES:");
        System.out.println("   ‚úÖ Classes de funcion√°rio focam apenas nos dados");
        System.out.println("   ‚úÖ Visitors focam apenas nas opera√ß√µes");
        System.out.println("   ‚úÖ Cada visitor tem uma responsabilidade espec√≠fica");
        
        System.out.println("\n2. PRINC√çPIO OPEN/CLOSED:");
        System.out.println("   ‚úÖ Novas opera√ß√µes adicionadas sem modificar classes existentes");
        System.out.println("   ‚úÖ EstatisticasVisitor criado sem tocar em Funcionario");
        System.out.println("   ‚úÖ Sistema extens√≠vel para futuras opera√ß√µes");
        
        System.out.println("\n3. ELIMINA√á√ÉO DE DUPLICA√á√ÉO:");
        System.out.println("   ‚úÖ L√≥gica tribut√°ria centralizada em um visitor");
        System.out.println("   ‚úÖ C√°lculos de b√¥nus organizados por visitor");
        System.out.println("   ‚úÖ Formata√ß√£o de relat√≥rios padronizada");
        
        System.out.println("\n4. DOUBLE DISPATCH:");
        System.out.println("   ‚úÖ Polimorfismo duplo implementado");
        System.out.println("   ‚úÖ M√©todo correto chamado baseado em ambos os tipos");
        System.out.println("   ‚úÖ Flexibilidade m√°xima na escolha de opera√ß√µes");
        
        System.out.println("\n5. REUTILIZA√á√ÉO E COMPOSI√á√ÉO:");
        System.out.println("   ‚úÖ Visitors podem ser reutilizados em diferentes contextos");
        System.out.println("   ‚úÖ M√∫ltiplos visitors podem ser aplicados ao mesmo objeto");
        System.out.println("   ‚úÖ F√°cil cria√ß√£o de relat√≥rios compostos");
        
        System.out.println("\n6. MANUTENIBILIDADE:");
        System.out.println("   ‚úÖ Mudan√ßas em opera√ß√µes isoladas em visitors espec√≠ficos");
        System.out.println("   ‚úÖ Testes unit√°rios focados e independentes");
        System.out.println("   ‚úÖ Debugging simplificado por responsabilidade");
        
        System.out.println("\nüéØ COMPARA√á√ÉO COM IMPLEMENTA√á√ÉO SEM VISITOR:");
        System.out.println("   ‚ùå Sem Visitor: Adicionar opera√ß√£o = modificar N classes");
        System.out.println("   ‚úÖ Com Visitor: Adicionar opera√ß√£o = criar 1 visitor");
        System.out.println("   ‚ùå Sem Visitor: L√≥gica espalhada e duplicada");
        System.out.println("   ‚úÖ Com Visitor: L√≥gica centralizada e reutiliz√°vel");
        System.out.println("   ‚ùå Sem Visitor: Viola√ß√£o do princ√≠pio Open/Closed");
        System.out.println("   ‚úÖ Com Visitor: Princ√≠pio Open/Closed respeitado");
    }
}

/**
 * Exemplo de novo visitor criado sem modificar classes existentes
 * Demonstra a extensibilidade do padr√£o Visitor
 */
class EstatisticasVisitor implements FuncionarioVisitor {
    private int totalDesenvolvedores = 0;
    private int totalGerentes = 0;
    private int totalEstagiarios = 0;
    private double totalSalarios = 0.0;
    private int totalLinhasCodigo = 0;
    private int totalBugsCorrigidos = 0;
    private int totalProjetosConcluidos = 0;
    private int totalHorasEstudo = 0;
    
    @Override
    public void visitDesenvolvedor(Desenvolvedor desenvolvedor) {
        totalDesenvolvedores++;
        totalSalarios += desenvolvedor.getSalarioBase();
        totalLinhasCodigo += desenvolvedor.getLinhasCodigo();
        totalBugsCorrigidos += desenvolvedor.getBugsCorrigidos();
    }
    
    @Override
    public void visitGerente(Gerente gerente) {
        totalGerentes++;
        totalSalarios += gerente.getSalarioBase();
        totalProjetosConcluidos += gerente.getProjetosConcluidos();
    }
    
    @Override
    public void visitEstagiario(Estagiario estagiario) {
        totalEstagiarios++;
        totalSalarios += estagiario.getSalarioBase();
        totalHorasEstudo += estagiario.getHorasEstudo();
    }
    
    public String getEstatisticas() {
        int totalFuncionarios = totalDesenvolvedores + totalGerentes + totalEstagiarios;
        double salarioMedio = totalFuncionarios > 0 ? totalSalarios / totalFuncionarios : 0;
        
        return String.format(
            "=== ESTAT√çSTICAS GERAIS ===\n" +
            "Total de Funcion√°rios: %d\n" +
            "  - Desenvolvedores: %d (%.1f%%)\n" +
            "  - Gerentes: %d (%.1f%%)\n" +
            "  - Estagi√°rios: %d (%.1f%%)\n" +
            "\nM√©tricas Financeiras:\n" +
            "  - Total em Sal√°rios: R$ %.2f\n" +
            "  - Sal√°rio M√©dio: R$ %.2f\n" +
            "\nM√©tricas de Produtividade:\n" +
            "  - Total Linhas de C√≥digo: %d\n" +
            "  - Total Bugs Corrigidos: %d\n" +
            "  - Total Projetos Conclu√≠dos: %d\n" +
            "  - Total Horas de Estudo: %d\n" +
            "\nüìä Esta opera√ß√£o foi adicionada SEM modificar as classes existentes!\n",
            totalFuncionarios,
            totalDesenvolvedores, totalFuncionarios > 0 ? (totalDesenvolvedores * 100.0 / totalFuncionarios) : 0,
            totalGerentes, totalFuncionarios > 0 ? (totalGerentes * 100.0 / totalFuncionarios) : 0,
            totalEstagiarios, totalFuncionarios > 0 ? (totalEstagiarios * 100.0 / totalFuncionarios) : 0,
            totalSalarios,
            salarioMedio,
            totalLinhasCodigo,
            totalBugsCorrigidos,
            totalProjetosConcluidos,
            totalHorasEstudo
        );
    }
}