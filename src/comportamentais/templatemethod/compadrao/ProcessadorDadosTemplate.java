package comportamentais.templatemethod.compadrao;

import java.util.*;

/**
 * Classe abstrata que define o Template Method
 * 
 * Esta classe implementa o padr√£o Template Method, definindo
 * o esqueleto do algoritmo de processamento de dados e permitindo
 * que as subclasses implementem passos espec√≠ficos.
 * 
 * VANTAGENS:
 * - Define estrutura comum para algoritmos similares
 * - Elimina duplica√ß√£o de c√≥digo
 * - Garante consist√™ncia na execu√ß√£o dos passos
 * - Facilita manuten√ß√£o e extens√£o
 * - Implementa o princ√≠pio DRY (Don't Repeat Yourself)
 * - Permite customiza√ß√£o de passos espec√≠ficos
 */
public abstract class ProcessadorDadosTemplate {
    
    /**
     * TEMPLATE METHOD - Define o esqueleto do algoritmo
     * 
     * Este m√©todo define a sequ√™ncia de passos para processar dados.
     * √â final para garantir que a estrutura n√£o seja alterada pelas subclasses.
     * 
     * ESTRUTURA DO ALGORITMO:
     * 1. Validar dados de entrada
     * 2. Carregar dados espec√≠ficos
     * 3. Processar dados (implementa√ß√£o espec√≠fica)
     * 4. Salvar resultados
     * 5. Limpar recursos
     */
    public final void processarDados(List<String> dados) {
        System.out.println("=== INICIANDO PROCESSAMENTO: " + getTipoProcessamento() + " ===");
        
        // Passo 1: Valida√ß√£o (implementa√ß√£o comum)
        if (!validarDados(dados)) {
            System.out.println("‚ùå Processamento cancelado devido a dados inv√°lidos\n");
            return;
        }
        
        // Passo 2: Carregamento (implementa√ß√£o espec√≠fica)
        List<String> dadosCarregados = carregarDados(dados);
        
        // Passo 3: Processamento principal (implementa√ß√£o espec√≠fica)
        Object resultado = processarDadosEspecificos(dadosCarregados);
        
        // Passo 4: Salvamento (implementa√ß√£o comum com hook)
        salvarResultados(resultado);
        
        // Passo 5: Limpeza (implementa√ß√£o comum com hook)
        limparRecursos(dadosCarregados);
        
        System.out.println("‚úÖ Processamento de " + getTipoProcessamento() + " conclu√≠do\n");
    }
    
    // M√âTODOS CONCRETOS (implementa√ß√£o comum)
    
    /**
     * Valida√ß√£o comum para todos os tipos de dados
     * VANTAGEM: L√≥gica centralizada, evita duplica√ß√£o
     */
    protected boolean validarDados(List<String> dados) {
        System.out.println("1. Validando dados de entrada...");
        
        if (dados == null) {
            System.out.println("‚ùå Dados s√£o nulos!");
            return false;
        }
        
        if (dados.isEmpty()) {
            System.out.println("‚ùå Lista de dados est√° vazia!");
            return false;
        }
        
        // Valida√ß√£o adicional espec√≠fica (hook method)
        if (!validacaoAdicional(dados)) {
            return false;
        }
        
        System.out.println("‚úÖ Dados v√°lidos (" + dados.size() + " registros)");
        return true;
    }
    
    /**
     * Salvamento comum para todos os tipos de resultado
     * VANTAGEM: L√≥gica centralizada, comportamento consistente
     */
    protected void salvarResultados(Object resultado) {
        System.out.println("4. Salvando resultados...");
        
        String nomeArquivo = getTipoProcessamento().toLowerCase() + "_processado.txt";
        System.out.println("üíæ Dados salvos em: " + nomeArquivo);
        
        // Hook para salvamento adicional
        salvamentoAdicional(resultado);
    }
    
    /**
     * Limpeza comum de recursos
     * VANTAGEM: Garante libera√ß√£o consistente de recursos
     */
    protected void limparRecursos(List<String> dadosCarregados) {
        System.out.println("5. Limpando recursos...");
        
        if (dadosCarregados != null) {
            dadosCarregados.clear();
        }
        
        // Hook para limpeza adicional
        limpezaAdicional();
        
        System.out.println("üßπ Recursos liberados");
    }
    
    // M√âTODOS ABSTRATOS (devem ser implementados pelas subclasses)
    
    /**
     * Retorna o tipo de processamento
     * Usado para logs e identifica√ß√£o
     */
    protected abstract String getTipoProcessamento();
    
    /**
     * Carrega dados espec√≠ficos do tipo de processamento
     * Cada subclasse implementa sua l√≥gica de carregamento
     */
    protected abstract List<String> carregarDados(List<String> dadosOriginais);
    
    /**
     * Processa os dados de forma espec√≠fica
     * N√∫cleo da l√≥gica espec√≠fica de cada tipo
     */
    protected abstract Object processarDadosEspecificos(List<String> dadosCarregados);
    
    // HOOK METHODS (m√©todos opcionais que podem ser sobrescritos)
    
    /**
     * Hook para valida√ß√£o adicional espec√≠fica
     * Subclasses podem sobrescrever para adicionar valida√ß√µes espec√≠ficas
     */
    protected boolean validacaoAdicional(List<String> dados) {
        // Implementa√ß√£o padr√£o: sem valida√ß√£o adicional
        return true;
    }
    
    /**
     * Hook para salvamento adicional
     * Subclasses podem sobrescrever para adicionar salvamentos espec√≠ficos
     */
    protected void salvamentoAdicional(Object resultado) {
        // Implementa√ß√£o padr√£o: sem salvamento adicional
    }
    
    /**
     * Hook para limpeza adicional
     * Subclasses podem sobrescrever para adicionar limpezas espec√≠ficas
     */
    protected void limpezaAdicional() {
        // Implementa√ß√£o padr√£o: sem limpeza adicional
    }
    
    // M√âTODOS UTILIT√ÅRIOS
    
    /**
     * M√©todo utilit√°rio para filtrar dados
     * VANTAGEM: Reutiliza√ß√£o de c√≥digo comum
     */
    protected List<String> filtrarDados(List<String> dados, String filtro) {
        List<String> dadosFiltrados = new ArrayList<>();
        for (String dado : dados) {
            if (dado.toLowerCase().contains(filtro.toLowerCase())) {
                dadosFiltrados.add(dado.toUpperCase());
            }
        }
        return dadosFiltrados;
    }
    
    /**
     * M√©todo utilit√°rio para logging
     * VANTAGEM: Logging consistente em todas as subclasses
     */
    protected void log(String mensagem) {
        System.out.println("[" + getTipoProcessamento() + "] " + mensagem);
    }
    
    /**
     * M√©todo para obter estat√≠sticas b√°sicas
     * VANTAGEM: Funcionalidade comum dispon√≠vel para todas as subclasses
     */
    protected void mostrarEstatisticas(List<String> dados, Object resultado) {
        System.out.println("üìä Estat√≠sticas:");
        System.out.println("   - Registros processados: " + dados.size());
        System.out.println("   - Tipo de resultado: " + resultado.getClass().getSimpleName());
        System.out.println("   - Timestamp: " + new Date());
    }
}