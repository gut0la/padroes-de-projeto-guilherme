package comportamentais.templatemethod.compadrao;

import java.util.*;

/**
 * Demonstra√ß√£o do padr√£o Template Method
 * 
 * Esta classe mostra como o padr√£o Template Method resolve os problemas
 * da implementa√ß√£o sem padr√£o, proporcionando:
 * 
 * VANTAGENS:
 * - Elimina√ß√£o de duplica√ß√£o de c√≥digo
 * - Estrutura comum para algoritmos similares
 * - Consist√™ncia na execu√ß√£o dos passos
 * - Facilidade para manter e estender
 * - Implementa√ß√£o do princ√≠pio DRY
 * - Reutiliza√ß√£o de c√≥digo comum
 * - Flexibilidade atrav√©s de hooks
 */
public class ProcessamentoDadosComTemplate {
    
    public static void main(String[] args) {
        System.out.println("=== DEMONSTRA√á√ÉO DO PADR√ÉO TEMPLATE METHOD ===");
        System.out.println("Processamento de Dados com Estrutura Comum\n");
        
        // Prepara√ß√£o dos dados de exemplo
        List<String> dadosVendas = Arrays.asList(
            "venda_001_produto_A", "venda_002_produto_B", "venda_003_produto_C",
            "venda_004_produto_A", "venda_005_produto_D"
        );
        
        List<String> dadosEstoque = Arrays.asList(
            "estoque_produto_A_50", "estoque_produto_B_30", "estoque_produto_C_5",
            "estoque_produto_D_75", "estoque_produto_E_2"
        );
        
        List<String> dadosClientes = Arrays.asList(
            "cliente_joao_silva", "cliente_maria_santos", "cliente_pedro_oliveira",
            "cliente_ana_costa", "cliente_carlos_ferreira"
        );
        
        // Demonstra√ß√£o 1: Processamento b√°sico com Template Method
        System.out.println("\nüéØ === PROCESSAMENTO B√ÅSICO ===");
        
        // VANTAGEM: Mesma interface para todos os processadores
        ProcessadorDadosTemplate processadorVendas = new ProcessadorVendas();
        ProcessadorDadosTemplate processadorEstoque = new ProcessadorEstoque();
        ProcessadorDadosTemplate processadorClientes = new ProcessadorClientes();
        
        // VANTAGEM: Estrutura comum garantida pelo Template Method
        processadorVendas.processarDados(dadosVendas);
        processadorEstoque.processarDados(dadosEstoque);
        processadorClientes.processarDados(dadosClientes);
        
        // Demonstra√ß√£o 2: Processamento em lote
        System.out.println("\nüì¶ === PROCESSAMENTO EM LOTE ===");
        demonstrarProcessamentoLote();
        
        // Demonstra√ß√£o 3: Tratamento de erros consistente
        System.out.println("\n‚ùå === TRATAMENTO DE ERROS ===");
        demonstrarTratamentoErros();
        
        // Demonstra√ß√£o 4: Flexibilidade do padr√£o
        System.out.println("\nüîß === FLEXIBILIDADE DO PADR√ÉO ===");
        demonstrarFlexibilidade();
        
        // Demonstra√ß√£o 5: Compara√ß√£o de performance
        System.out.println("\n‚ö° === COMPARA√á√ÉO DE PERFORMANCE ===");
        demonstrarPerformance();
        
        // Demonstra√ß√£o das vantagens
        System.out.println("\n‚úÖ === VANTAGENS DEMONSTRADAS ===");
        System.out.println("1. ‚úì Elimina√ß√£o de duplica√ß√£o de c√≥digo");
        System.out.println("2. ‚úì Estrutura comum garantida");
        System.out.println("3. ‚úì Consist√™ncia na execu√ß√£o");
        System.out.println("4. ‚úì Facilidade de manuten√ß√£o");
        System.out.println("5. ‚úì Princ√≠pio DRY implementado");
        System.out.println("6. ‚úì Reutiliza√ß√£o de c√≥digo comum");
        System.out.println("7. ‚úì Flexibilidade atrav√©s de hooks");
        System.out.println("8. ‚úì F√°cil extens√£o com novos processadores");
        
        System.out.println("\nüéØ Padr√£o Template Method implementado com sucesso!");
        System.out.println("Compare com ProcessamentoDadosSemTemplate para ver as diferen√ßas.");
    }
    
    /**
     * Demonstra processamento em lote usando polimorfismo
     */
    private static void demonstrarProcessamentoLote() {
        // VANTAGEM: Polimorfismo permite tratar todos os processadores igualmente
        List<ProcessadorDadosTemplate> processadores = Arrays.asList(
            new ProcessadorVendas(),
            new ProcessadorEstoque(),
            new ProcessadorClientes()
        );
        
        List<List<String>> conjuntosDados = Arrays.asList(
            Arrays.asList("venda_lote_001", "venda_lote_002"),
            Arrays.asList("estoque_lote_A_100", "estoque_lote_B_200"),
            Arrays.asList("cliente_lote_usuario1", "cliente_lote_usuario2")
        );
        
        System.out.println("Processando " + processadores.size() + " tipos de dados em lote...");
        
        for (int i = 0; i < processadores.size(); i++) {
            ProcessadorDadosTemplate processador = processadores.get(i);
            List<String> dados = conjuntosDados.get(i);
            
            System.out.println("\n--- Processamento " + (i + 1) + " ---");
            processador.processarDados(dados);
        }
    }
    
    /**
     * Demonstra tratamento consistente de erros
     */
    private static void demonstrarTratamentoErros() {
        ProcessadorDadosTemplate processador = new ProcessadorVendas();
        
        // Teste com dados nulos
        System.out.println("Testando com dados nulos:");
        processador.processarDados(null);
        
        // Teste com lista vazia
        System.out.println("Testando com lista vazia:");
        processador.processarDados(new ArrayList<>());
        
        // Teste com dados inv√°lidos
        System.out.println("Testando com dados inv√°lidos:");
        processador.processarDados(Arrays.asList("dados_invalidos", "sem_formato_correto"));
        
        System.out.println("‚úÖ Tratamento de erros consistente em todos os casos!");
    }
    
    /**
     * Demonstra a flexibilidade do padr√£o atrav√©s de extens√£o
     */
    private static void demonstrarFlexibilidade() {
        // Cria√ß√£o de um novo processador personalizado
        ProcessadorDadosTemplate processadorPersonalizado = new ProcessadorPersonalizado();
        
        List<String> dadosPersonalizados = Arrays.asList(
            "custom_data_001", "custom_data_002", "custom_data_003"
        );
        
        System.out.println("Demonstrando extensibilidade com processador personalizado:");
        processadorPersonalizado.processarDados(dadosPersonalizados);
    }
    
    /**
     * Demonstra compara√ß√£o de performance (simulada)
     */
    private static void demonstrarPerformance() {
        List<String> dadosGrandes = new ArrayList<>();
        for (int i = 0; i < 1000; i++) {
            dadosGrandes.add("venda_" + i + "_produto_" + (i % 10));
        }
        
        ProcessadorDadosTemplate processador = new ProcessadorVendas();
        
        long inicio = System.currentTimeMillis();
        processador.processarDados(dadosGrandes);
        long fim = System.currentTimeMillis();
        
        System.out.println("‚ö° Processamento de " + dadosGrandes.size() + " registros:");
        System.out.println("   Tempo: " + (fim - inicio) + "ms");
        System.out.println("   Estrutura otimizada pelo Template Method");
    }
    
    /**
     * Processador personalizado para demonstrar extensibilidade
     */
    private static class ProcessadorPersonalizado extends ProcessadorDadosTemplate {
        
        @Override
        protected String getTipoProcessamento() {
            return "PERSONALIZADO";
        }
        
        @Override
        protected List<String> carregarDados(List<String> dadosOriginais) {
            System.out.println("2. Carregando dados personalizados...");
            
            // VANTAGEM: Reutiliza m√©todo utilit√°rio da classe pai
            List<String> dadosPersonalizados = filtrarDados(dadosOriginais, "custom");
            
            log(dadosPersonalizados.size() + " registros personalizados carregados");
            System.out.println("üîß Dados personalizados preparados");
            
            return dadosPersonalizados;
        }
        
        @Override
        protected Object processarDadosEspecificos(List<String> dadosCarregados) {
            System.out.println("3. Processando dados personalizados...");
            
            Map<String, Object> resultado = new HashMap<>();
            resultado.put("total", dadosCarregados.size());
            resultado.put("processedAt", new Date());
            resultado.put("type", "CUSTOM");
            
            for (String dado : dadosCarregados) {
                log("Processando: " + dado);
            }
            
            System.out.println("üîß Processamento personalizado conclu√≠do");
            
            // VANTAGEM: Reutiliza m√©todo utilit√°rio da classe pai
            mostrarEstatisticas(dadosCarregados, resultado);
            
            return resultado;
        }
        
        @Override
        protected void salvamentoAdicional(Object resultado) {
            System.out.println("üíæ Salvamento personalizado executado");
            System.out.println("üîß Dados enviados para sistema personalizado");
        }
        
        @Override
        protected void limpezaAdicional() {
            log("Limpeza personalizada executada");
        }
    }
    
    /**
     * M√©todo utilit√°rio para demonstrar uso avan√ßado
     */
    public static void processarMultiplosTipos(List<ProcessadorDadosTemplate> processadores,
                                               Map<String, List<String>> dadosPorTipo) {
        System.out.println("\nüîÑ === PROCESSAMENTO AVAN√áADO ===");
        
        for (ProcessadorDadosTemplate processador : processadores) {
            String tipo = processador.getTipoProcessamento().toLowerCase();
            List<String> dados = dadosPorTipo.get(tipo);
            
            if (dados != null && !dados.isEmpty()) {
                System.out.println("\nProcessando " + tipo + " com " + dados.size() + " registros:");
                processador.processarDados(dados);
            } else {
                System.out.println("\n‚ö†Ô∏è Sem dados para processar: " + tipo);
            }
        }
    }
    
    /**
     * M√©todo para benchmark de diferentes implementa√ß√µes
     */
    public static void compararImplementacoes() {
        System.out.println("\nüìä === COMPARA√á√ÉO DE IMPLEMENTA√á√ïES ===");
        
        List<String> dadosTeste = Arrays.asList(
            "venda_benchmark_001", "venda_benchmark_002", "venda_benchmark_003"
        );
        
        ProcessadorDadosTemplate processadorTemplate = new ProcessadorVendas();
        
        // Medi√ß√£o com Template Method
        long inicioTemplate = System.currentTimeMillis();
        processadorTemplate.processarDados(dadosTeste);
        long fimTemplate = System.currentTimeMillis();
        
        System.out.println("\nüìà Resultados do Benchmark:");
        System.out.println("Template Method: " + (fimTemplate - inicioTemplate) + "ms");
        System.out.println("‚úÖ C√≥digo organizado, reutiliz√°vel e manuten√≠vel");
        System.out.println("‚úÖ Estrutura consistente garantida");
        System.out.println("‚úÖ F√°cil extens√£o e modifica√ß√£o");
    }
}